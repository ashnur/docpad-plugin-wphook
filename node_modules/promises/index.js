if ( typeof setImmediate !== 'function' ) {
    setImmediate = function setImmediate(func, param){
        return setTimeout(function(){ func(param) }, 0)
    }
}

void function(root){
    'use strict'

    var VOW = function(){

        function enqueue(queue, func, resolver, breaker){

            if ( typeof func === 'function' ) {
                queue[queue.length] = function(value){
                    var result;
                    try {
                        result = func(value)
                        if ( result && result.is_promise === true ) {
                            result.when(resolver, breaker)
                        } else {
                            resolver(result)
                        }
                    } catch ( e ) {
                        breaker(e)
                    }
                }
            } else {
                queue[queue.length] = resolver
            }
        }

        function enlighten(queue, fate){
            queue.forEach(function(func){ setImmediate(func, fate) })
        }

        return {
            make: function make(){
                var breakers = []
                    , fate
                    , keepers = []
                    , status = 'pending'
                    ;

                function herald(state, value, queue){
                    if (status !== 'pending') { throw "overpromise" }
                    fate = value
                    status = state
                    enlighten(queue, fate)
                    keepers.length = 0
                    breakers.length = 0
                }

                return {
                    'break': function(value){
                        herald('broken', value, breakers)
                    }
                    , keep: function keep(value){
                        herald('kept', value, keepers)
                    }
                    , promise: {
                        is_promise: true
                        , when: function (kept, broken){
                            var vow = make()
                                ;
                            switch (status) {
                                case 'pending':
                                    enqueue(keepers,  kept,   vow.keep,     vow['break'])
                                    enqueue(breakers, broken, vow['break'], vow['break'])
                                    break
                                case 'kept':
                                    enqueue(keepers, kept, vow.keep, vow['break'])
                                    enlighten(keepers, fate)
                                    break
                                case 'broken':
                                    enqueue(breakers, broken, vow['break'], vow['break'])
                                    enlighten(breakers, fate)
                                    break
                            }
                            return vow.promise
                        }
                    }
                }
            }
            , every: function every(array){
                var remaining = array.length
                    , results = []
                    , vow = VOW.make()
                    ;
                if (!remaining) {
                    vow['break'](array)
                } else {
                    array.forEach(function(promise, i){
                        promise.when(
                            function(value){
                                results[i] = value
                                remaining -= 1
                                if (remaining === 0) {
                                    vow.keep(results)
                                }
                            }
                            , function(reason){
                                remaining = NaN
                                vow['break'](reason)
                            }
                        )
                    })
                }
                return vow.promise
            }
            , first: function first(array){
                var found = false
                    , remaining = array.length
                    , vow = VOW.make()
                    ;

                function check(){
                    remaining -= 1
                    if (remaining === 0 && !found) {
                        vow['break']()
                    }
                }
                if (remaining === 0) {
                    vow['break'](array)
                } else {
                    array.forEach(function(promise){
                        promise.when(
                            function(value){
                                if (!found) {
                                    found = true
                                    vow.keep(value)
                                }
                                check()
                            }
                            , check
                        )
                    })
                }
                return vow.promise
            }
            , any: function any(array){
                var remaining = array.length
                    , results = []
                    , vow = VOW.make()
                    ;

                function check(){
                    remaining -= 1
                    if (remaining === 0) {
                        vow.keep(results)
                    }
                }

                if (!remaining) {
                    vow.keep(results)
                } else {
                    array.forEach(function(promise, i){
                        promise.when(
                            function(value){
                                results[i] = value
                                check()
                            }
                            , check
                        )
                    })
                }
                return vow.promise
            }
            , kept: function(value){
                var vow = VOW.make()
                    ;
                vow.keep(value)
                return vow.promise
            }
            , broken: function(reason){
                var vow = VOW.make()
                    ;
                vow['break'](reason)
                return vow.promise
            }
        }
    }()

    if ( typeof module != 'undefined' && module.exports )
        module.exports = VOW
    else
        root.factory = VOW
}(this)
